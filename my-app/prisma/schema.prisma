// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Different roles a user can have.
enum UserRole {
  USER
  HOTEL_OWNER
  ADMIN
}

// The status of a booking or its sub-components (flights, rooms).
enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

// Store seat classes for flights.
enum SeatClass {
  ECONOMY
  PREMIUM_ECONOMY
  BUSINESS
  FIRST
}

/**
 * -----------------------------
 * USER & AUTH
 * -----------------------------
 */

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  passwordHash   String
  firstName      String
  lastName       String
  phoneNumber    String?
  profilePicture Bytes?
  role           UserRole  @default(USER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  notifications  Notification[]
  hotels        Hotel[] // If the user is a HOTEL_OWNER, they can have multiple hotels
  bookings      Booking[] // Bookings made by the user
}

/**
 * -----------------------------
 * HOTELS & ROOM TYPES
 * -----------------------------
 */
model Hotel {
  id         String   @id @default(uuid())
  name       String
  logo       String?
  address    String
  city       String
  location   String // city, country
  starRating Float
  images     Json
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  ownerId       String
  owner         User           @relation(fields: [ownerId], references: [id])
  roomTypes     RoomType[]
  // Bookings referencing the hotel directly are captured in HotelBooking
  hotelBookings  HotelBooking[]
}

model RoomType {
  id            String   @id @default(uuid())
  name          String // e.g., 'Twin', 'Double', 'Suite'
  amenities     Json // e.g., {'Wi-Fi', 'TV', 'Minibar'}
  pricePerNight  Decimal
  images        Json
  totalRooms    Int
  // schedule is a JSON column storing an array of "room schedules"
  schedule      Json // e.g. an array of objects, each with date->boolean map
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  hotelId       String
  hotel         Hotel          @relation(fields: [hotelId], references: [id])
  // For room bookings:
  hotelBookings  HotelBooking[]
}

/**
 * -----------------------------
 * BOOKINGS (ITINERARIES)
 * -----------------------------
 * A "Booking" can be a container/itinerary for multiple flights and/or hotel rooms.
 * FlightBooking & HotelBooking are line items in the overall Booking.
 */
model Booking {
  id        String        @id @default(uuid())
  status    BookingStatus  @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  customerFirstName  String  @default("")
  customerLastName  String  @default("")
  customerEmail   String  @default("")

  totalPrice  Decimal   @default(0) // Sum of flight + hotel price

  // Link to user
  userId  String
  user   User   @relation(fields: [userId], references: [id])

  // Relations
  flightBookingId  String?
  flightBookings  FlightBooking?

  hotelBookingId  String?
  hotelBookings  HotelBooking?
}

model FlightBooking {
  id        String        @id @default(uuid())
  status    BookingStatus  @default(PENDING)
  reference  String // e.g. external flight reference from AFS
  price     Decimal
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  // Relations
  bookingId  String  @unique
  booking   Booking  @relation(fields: [bookingId], references: [id])

  flightId  String?
}

model HotelBooking {
  id              String        @id @default(uuid())
  status          BookingStatus  @default(PENDING)
  checkIn         DateTime
  checkOut        DateTime
  customerFirstName  String  @default("")
  customerLastName  String  @default("")
  customerEmail   String  @default("")
  totalPrice      Decimal
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  roomIndexNumber  Int?

  // Relations
  bookingId  String  @unique
  booking   Booking  @relation(fields: [bookingId], references: [id])

  hotelId  String
  hotel   Hotel  @relation(fields: [hotelId], references: [id])

  roomTypeId  String
  roomType   RoomType  @relation(fields: [roomTypeId], references: [id])
}

/**
 * -----------------------------
 * NOTIFICATIONS
 * -----------------------------
 * Allows the system to store notifications for users and hotel owners
 * (e.g., booking confirmations, cancellations, etc.).
 */
model Notification {
  id        String   @id @default(uuid())
  message   String
  isRead    Boolean  @default(false)
  createdAt  DateTime  @default(now())

  // Relations
  userId  String
  user   User   @relation(fields: [userId], references: [id])
}

model City {
  id       String    @id @default(uuid())
  city     String    @unique
  country  String
  airports  Airport[]
}

model Airport {
  id     String  @id @default(uuid())
  name   String
  code   String  @unique
  cityId  String
  city   City   @relation(fields: [cityId], references: [id])
}
